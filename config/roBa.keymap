#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt { tapping-term-ms = <300>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R        &kp T                                        &kp Y          &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F        &kp G        &kp LS(LG(S))    &kp MINUS      &kp H          &kp J  &kp K      &kp L    &lt 4 SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V        &kp B        &kp COLON        &kp SEMICOLON  &kp N          &kp M  &kp COMMA  &kp DOT  &lt 2 SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 TILDE  &lt 4 SPACE  &lt 2 MINUS      &kp ENTER      &kp BACKSPACE                             &kp LEFT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>, <&inc_dec_kp 0 0>;
        };

        NUM {
            bindings = <
&kp ESC                   &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)                                              &kp EQUAL      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LS(NUMBER_8)
&kp TAB                   &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp ASTERISK       &kp LC(LA(KP_NUMBER_0))    &kp UNDERSCORE  &kp NUMBER_0   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LS(PERCENT)
&mt LEFT_SHIFT BACKSLASH  &kp LS(NUMBER_9)  &kp LS(NUMBER_0)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL                  &trans          &kp MINUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH
&kp RCTRL                 &kp LEFT_COMMAND  &kp LEFT_ALT      &trans            &trans             &trans                     &kp ENTER       &kp BACKSPACE                                            &kp RIGHT_SHIFT
            >;
        };

        ARROW {
            bindings = <
&kp F1          &kp F2                  &kp UP_ARROW    &kp LC(TAB)              &trans                             &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans    &bt BT_CLR_ALL  &bt BT_DISC 0  &mkp MB1      &bt BT_DISC 2  &mkp MB2      &bt BT_DISC 4
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp C           &kp LG(LS(RIGHT_ARROW))  &trans   &trans    &out OUT_TOG    &trans         &trans        &trans         &trans        &trans
&trans          &trans                  &trans          &trans                   &trans   &trans    &trans          &trans                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F6  &trans  &trans  &trans  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &kp F12
            >;
        };

        MOUSE {
            bindings = <
&kp ESC     &trans       &kp UP    &kp LC(F)  &kp LC(Z)                             &trans         &trans    &mkp MB3  &trans    &trans
&kp TAB     &kp LEFT     &trans    &kp RIGHT  &kp LC(C)  &trans          &trans     &trans         &mkp MB1  &lt 5 A   &mkp MB2  &kp LA(GRAVE)
&kp LSHIFT  &kp LS(SQT)  &kp DOWN  &kp LC(G)  &kp LC(V)  &trans          &trans     &trans         &trans    &trans    &trans    &kp RC(SPACE)
&trans      &trans       &trans    &trans     &kp B      &out OUT_TOG    &kp ENTER  &kp BACKSPACE                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &trans    &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp C   &kp B     &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
